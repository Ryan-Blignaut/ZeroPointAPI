https://www.shadertoy.com/view/7sSXDW
https://www.shadertoy.com/view/4tlSzl
https://www.shadertoy.com/view/4s2yW1
https://www.shadertoy.com/view/MssyRN
https://www.shadertoy.com/view/lldyDs
https://www.shadertoy.com/view/MlG3R3#


https://glslsandbox.com/e#78212.0


///

#define ANIMATE
#define OCTAVES 35



const float pi = 3.14159265359;
const float triangleScale = 0.816497161855865; // ratio of edge length and height
const vec3 orange = vec3(0.937, 0.435, 0.0);

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

vec4 getTriangleCoords(vec2 uv) {
    uv.y /= triangleScale;
    uv.x -= uv.y / 2.0;
    vec2 center = floor(uv);
    vec2 local = fract(uv);

    center.x += center.y / 2.0;
    center.y *= triangleScale;

    if (local.x + local.y > 1.0) {
    	local.x -= 1.0 - local.y;
        local.y = 1.0 - local.y;
        center.y += 0.586;
        center.x += 1.0;
    } else {
        center.y += 0.287;
    	center.x += 0.5;
    }

    return vec4(center, local);
}

vec4 getLoader(vec4 triangle) {
    if (length(triangle.xy) > 1.6) {
        return vec4(0.0);
    }

    float angle = atan(triangle.x, triangle.y);
    float seed = rand(triangle.xy);
    float dst = min(triangle.z, min(triangle.w, 1.0 - triangle.z - triangle.w)) * 15.0;
    float glow = dst < pi ? pow(sin(dst), 1.5) : 0.0;

    return vec4(mix(orange, vec3(1.0), glow * 0.07), pow(0.5 + 0.5 * sin(angle - iTime * 6.0 + seed), 2.0));
}

float getBackground(vec4 triangle) {
    float dst = min(triangle.z, min(triangle.w, 1.0 - triangle.z - triangle.w)) - 0.05;

    if (triangle.y > 1.9 || triangle.y < -2.4 || dst < 0.0) {
        return 0.0;
    }

    float value = pow(0.5 + 0.5 * cos(-abs(triangle.x) * 0.4 + rand(triangle.xy) * 2.0 + iTime * 4.0), 2.0) * 0.08;
    return value * (dst > 0.05 ? 0.65 : 1.0);
}

vec3 getColor(vec2 uv) {
    uv *= 2.0 / iResolution.y;

    vec3 background = vec3(getBackground(getTriangleCoords(uv * 6.0 - vec2(0.5, 0.3))));
 	vec4 loader = getLoader(getTriangleCoords(uv * 11.0))*vec4(2.0,2.0,2.0,1.0);

    vec3 color = mix(background, loader.rgb, loader.a);
    return color;
}




vec3 mod289(vec3 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x)
{
  return mod289(((x*34.0)+1.0)*x);
}

// Simplex noise
// https://github.com/ashima/webgl-noise
// Copyright (C) 2011 Ashima Arts. All rights reserved.
float snoise(vec2 v)
  {
  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                     -0.577350269189626,  // -1.0 + 2.0 * C.x
                      0.024390243902439); // 1.0 / 41.0
// First corner
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);

// Other corners
  vec2 i1;
  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
  //i1.y = 1.0 - i1.x;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  // x0 = x0 - 0.0 + 0.0 * C.xx ;
  // x1 = x0 - i1 + 1.0 * C.xx ;
  // x2 = x0 - 1.0 + 2.0 * C.xx ;
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;

// Permutations
  i = mod289(i); // Avoid truncation effects in permutation
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));

  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;

// Normalise gradients implicitly by scaling m
// Approximation of: m *= inversesqrt( a0*a0 + h*h );
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

// Compute final noise value at P
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

vec2 rand2(vec2 p)
{
    p = vec2(dot(p, vec2(12.9898,78.233)), dot(p, vec2(26.65125, 83.054543)));
    return fract(sin(p) * 43758.5453);
}



vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

// Thanks to David Hoskins https://www.shadertoy.com/view/4djGRh
float stars(in vec2 x, float numCells, float size, float br)
{
    vec2 n = x * numCells;
    vec2 f = floor(n);

	float d = 1.0e10;
    for (int i = -1; i <= 1; ++i)
    {
        for (int j = -1; j <= 1; ++j)
        {
            vec2 g = f + vec2(float(i), float(j));
			g = n - g - rand2(mod(g, numCells)) + rand(g);
            // Control size
            g *= 1. / (numCells * size);
			d = min(d, dot(g, g));
        }
    }

    return br * (smoothstep(.95, 1., (1. - sqrt(d))));
}

// Simple fractal noise
// persistence - A multiplier that determines how quickly the amplitudes diminish for
// each successive octave.
// lacunarity - A multiplier that determines how quickly the frequency increases for
// each successive octave.
float fractalNoise(in vec2 coord, in float persistence, in float lacunarity)
{
    float n = 0.;
    float frequency = 1.;
    float amplitude = 1.;
    for (int o = 0; o < OCTAVES; ++o)
    {
        n += amplitude * snoise(coord * frequency);
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    return n;
}

vec3 fractalNebula(in vec2 coord, vec3 color, float transparency)
{
    float n = fractalNoise(coord, .5, 2.);
    return n * color * transparency;
}

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    float resolution = max(iResolution.y, iResolution.y);

    vec2 coord = fragCoord.xy / resolution;

    vec3 result = vec3(0.);

#ifdef ANIMATE
    vec3 nebulaColor1 = hsv2rgb(vec3(.5+.5*sin(iTime*.1), 0.5, .25));
	vec3 nebulaColor2 = hsv2rgb(vec3(.5+.5*sin(iTime*.21), 1., .25));
#else
    vec3 nebulaColor1 = hsv2rgb(vec3(.5, 0.5, .25));
    vec3 nebulaColor2 = hsv2rgb(vec3(.7, 1., .25));
#endif
    result += fractalNebula(coord + vec2(.1, .1), nebulaColor1, 1.);
    result += fractalNebula(coord + vec2(0., .2), nebulaColor2, .5);

    result += stars(coord + iMouse.xy * 0.0001, 4., 0.1, 2.) * vec3(.74, .74, .74);
    result += stars(coord + iMouse.xy * 0.00005, 8., 0.05, 1.) * vec3(.97, .74, .74);
    result += stars(coord, 16., 0.025, 0.5) * vec3(.9, .9, .95);



        float tau = radians(180.)*2.0;
	vec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;
    float a = atan(p.x,p.y);
    float r = length(p);
    vec2 uv = vec2(a/tau,r);


    fragCoord = fragCoord - 0.5 * iResolution.xy;
	result += 0.25 * (getColor(fragCoord)
                            + getColor(fragCoord + vec2(0.5, 0.0))
                            + getColor(fragCoord + vec2(0.5, 0.5))
                            + getColor(fragCoord + vec2(0.0, 0.5)));


    fragColor = vec4(result, 1.);
}
///


const vec2 centPos = vec2(300,300);

float dot2( in vec2 v ) { return dot(v,v); }

float sdf( in vec2 p,in float r )
{
    const vec3 k = vec3(-0.866025404,0.5,0.577350269);
    p = abs(p);
    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;
    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);
    return length(p)*sign(p.y);
}

float sdRoundBox( in vec2 p, in vec2 b, in vec4 r )
{
    r.xy = (p.x>0.0)?r.xy : r.zw;
    r.x  = (p.y>0.0)?r.x  : r.y;
    vec2 q = abs(p)-b+r.x;
    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    float dist = sdRoundBox(fragCoord-centPos,vec2(300.0,150.0),vec4(0,30,0,30));
    //float dist = (length(fragCoord - centPos)-210.0);
    float alphaInvert = smoothstep(1.0, 3.0, dist);
    float alpha = 1.0 - alphaInvert;

    fragColor = vec4(alphaInvert);//vec4(1,1,alpha,1);
}